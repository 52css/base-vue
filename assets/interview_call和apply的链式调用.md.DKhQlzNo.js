import{_ as a,X as s,M as n,aw as l}from"./chunks/framework.BFDeQwB9.js";const _=JSON.parse('{"title":"call 和 apply 的链式调用","description":"","frontmatter":{},"headers":[],"relativePath":"interview/call和apply的链式调用.md","filePath":"interview/call和apply的链式调用.md"}'),p={name:"interview/call和apply的链式调用.md"},e=l(`<h1 id="call-和-apply-的链式调用" tabindex="-1">call 和 apply 的链式调用 <a class="header-anchor" href="#call-和-apply-的链式调用" aria-label="Permalink to &quot;call 和 apply 的链式调用&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> r</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> console.log.call.call.call.call.call.call.call.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * console.log.call === Function.prototype.call</span></span>
<span class="line"><span style="color:#6A737D;"> * console.log.call.call === Function.prototype.call</span></span>
<span class="line"><span style="color:#6A737D;"> *  =&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * const r = Function.prototype.call.apply((a) =&gt; a, [1, 2])</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * =&gt; 函数.apply(x, [y, z]) === x.函数(y, z)</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * =&gt; (a =&gt; a).call(1, 2) =&gt; 2</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,5),c=[e];function o(r,t,i,d,y,b){return n(),s("div",null,c)}const m=a(p,[["render",o]]);export{_ as __pageData,m as default};
