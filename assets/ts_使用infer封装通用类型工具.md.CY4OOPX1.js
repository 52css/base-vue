import{_ as s,X as a,M as n,aw as l}from"./chunks/framework.BFDeQwB9.js";const u=JSON.parse('{"title":"使用infer封装通用类型工具","description":"","frontmatter":{},"headers":[],"relativePath":"ts/使用infer封装通用类型工具.md","filePath":"ts/使用infer封装通用类型工具.md"}'),p={name:"ts/使用infer封装通用类型工具.md"},o=l(`<h1 id="使用infer封装通用类型工具" tabindex="-1">使用infer封装通用类型工具 <a class="header-anchor" href="#使用infer封装通用类型工具" aria-label="Permalink to &quot;使用infer封装通用类型工具&quot;">​</a></h1><h2 id="自己实现returntype" tabindex="-1">自己实现ReturnType <a class="header-anchor" href="#自己实现returntype" aria-label="Permalink to &quot;自己实现ReturnType&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Return</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> infer</span><span style="color:#B392F0;"> R</span><span style="color:#F97583;"> ?</span><span style="color:#B392F0;"> R</span><span style="color:#F97583;"> :</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> sum</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> concat</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[], </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sumResult</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Return</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">&gt;; </span><span style="color:#6A737D;">// number;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> concatResult</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Return</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">&gt;; </span><span style="color:#6A737D;">// any[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="获取函数第一个参数类型" tabindex="-1">获取函数第一个参数类型 <a class="header-anchor" href="#获取函数第一个参数类型" aria-label="Permalink to &quot;获取函数第一个参数类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> FirstArg</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#F97583;"> infer</span><span style="color:#B392F0;"> F</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span><span style="color:#F97583;"> ?</span><span style="color:#B392F0;"> F</span><span style="color:#F97583;"> :</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> fa</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> FirstArg</span><span style="color:#E1E4E8;">&lt;(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">&gt;; </span><span style="color:#6A737D;">// number;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="返回promise返回类型" tabindex="-1">返回Promise返回类型 <a class="header-anchor" href="#返回promise返回类型" aria-label="Permalink to &quot;返回Promise返回类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> PromiseType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">infer</span><span style="color:#B392F0;"> R</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> R</span><span style="color:#F97583;"> :</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> pt</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> PromiseType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="返回array类型" tabindex="-1">返回Array类型 <a class="header-anchor" href="#返回array类型" aria-label="Permalink to &quot;返回Array类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ArrayType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> extends</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">infer</span><span style="color:#B392F0;"> U</span><span style="color:#E1E4E8;">)[] </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> U</span><span style="color:#F97583;"> :</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ItemType1</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ArrayType</span><span style="color:#E1E4E8;">&lt;[</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">]&gt;; </span><span style="color:#6A737D;">// string | number;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ItemType2</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ArrayType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[]&gt; </span><span style="color:#6A737D;">// string;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,9),e=[o];function r(t,c,y,F,i,E){return n(),a("div",null,e)}const b=s(p,[["render",r]]);export{u as __pageData,b as default};
