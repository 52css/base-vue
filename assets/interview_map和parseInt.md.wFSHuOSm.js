import{_ as s,X as a,M as n,aw as e}from"./chunks/framework.BFDeQwB9.js";const _=JSON.parse('{"title":"map和parseInt","description":"","frontmatter":{},"headers":[],"relativePath":"interview/map和parseInt.md","filePath":"interview/map和parseInt.md"}'),p={name:"interview/map和parseInt.md"},l=e(`<h1 id="map和parseint" tabindex="-1">map和parseInt <a class="header-anchor" href="#map和parseint" aria-label="Permalink to &quot;map和parseInt&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> r</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(parseInt);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * parseInt(number, 进制)</span></span>
<span class="line"><span style="color:#6A737D;"> * 进制</span></span>
<span class="line"><span style="color:#6A737D;"> * 1. 不传递、undefined、null、0， 是自动</span></span>
<span class="line"><span style="color:#6A737D;"> *  0x =&gt; 16进制</span></span>
<span class="line"><span style="color:#6A737D;"> *  0 开头 =&gt; 10进制 ，老版本是8进制/10进制</span></span>
<span class="line"><span style="color:#6A737D;"> *  10 进制</span></span>
<span class="line"><span style="color:#6A737D;"> * 2. 2-32 有效，无效时NAN</span></span>
<span class="line"><span style="color:#6A737D;"> * 所以 =&gt; [1, NAN, NAN]</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,5),r=[l];function t(o,c,i,d,b,m){return n(),a("div",null,r)}const h=s(p,[["render",t]]);export{_ as __pageData,h as default};
