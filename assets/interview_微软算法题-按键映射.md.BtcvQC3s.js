import{_ as s,X as n,M as a,aw as l}from"./chunks/framework.BFDeQwB9.js";const d=JSON.parse('{"title":"微软算法题-按键映射","description":"","frontmatter":{},"headers":[],"relativePath":"interview/微软算法题-按键映射.md","filePath":"interview/微软算法题-按键映射.md"}'),p={name:"interview/微软算法题-按键映射.md"},e=l(`<h1 id="微软算法题-按键映射" tabindex="-1">微软算法题-按键映射 <a class="header-anchor" href="#微软算法题-按键映射" aria-label="Permalink to &quot;微软算法题-按键映射&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 根据数字按键，得到所有字母排列组合</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#B392F0;"> {string}</span><span style="color:#E1E4E8;"> digits</span><span style="color:#6A737D;"> 数字按键，例如&#39;23&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#B392F0;"> {string[]}</span><span style="color:#6A737D;"> 按键的所有排列组合</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> keyboardMap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">digits</span><span style="color:#E1E4E8;">) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> keyboardMap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">digits</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  function</span><span style="color:#B392F0;"> _compose</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">str2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> str1.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> str2.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(str1[i] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str2[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> map</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [, , </span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;def&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ghi&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;jkl&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mno&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pqrs&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tuv&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;wxyz&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> digits</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> map[x])</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(_compose, []);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,5),o=[e];function r(t,c,E,i,y,F){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
