import{_ as s,X as a,M as n,aw as e}from"./chunks/framework.BFDeQwB9.js";const _=JSON.parse('{"title":"数字格式化","description":"","frontmatter":{},"headers":[],"relativePath":"interview/数字格式化.md","filePath":"interview/数字格式化.md"}'),l={name:"interview/数字格式化.md"},p=e(`<h1 id="数字格式化" tabindex="-1">数字格式化 <a class="header-anchor" href="#数字格式化" aria-label="Permalink to &quot;数字格式化&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> str</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;100000000000&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 100,000,000,000;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * str.replace(/(?=\\d)/g, &#39;,&#39;) =&gt; &#39;,1,0,0,0,0,0,0,0,0,0,0,0&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> * 转换成匹配后3位</span></span>
<span class="line"><span style="color:#6A737D;"> * str.replace(/(?=\\d{3}$)/g, &#39;,&#39;) =&gt; &#39;100000000,000&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> * 匹配0次或多次</span></span>
<span class="line"><span style="color:#6A737D;"> * str.replace(/(?=(\\d{3})*$)/g, &#39;,&#39;) =&gt; &#39;,100,000,000,000,&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> * 去除首位</span></span>
<span class="line"><span style="color:#6A737D;"> * str.replace(/\\B(?=(\\d{3})*$)/g, &#39;,&#39;) =&gt; &#39;100,000,000,000&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">\\B</span><span style="color:#DBEDFF;">(?=(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{3}</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">*$</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,5),r=[p];function o(t,c,i,d,b,u){return n(),a("div",null,r)}const m=s(l,[["render",o]]);export{_ as __pageData,m as default};
