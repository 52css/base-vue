import{_ as e,X as a,M as i,aw as r}from"./chunks/framework.BFDeQwB9.js";const p=JSON.parse('{"title":"前端部分常用笔面试题点评","description":"","frontmatter":{},"headers":[],"relativePath":"interview/前端部分常用笔面试题点评.md","filePath":"interview/前端部分常用笔面试题点评.md"}'),t={name:"interview/前端部分常用笔面试题点评.md"},l=r('<h1 id="前端部分常用笔面试题点评" tabindex="-1">前端部分常用笔面试题点评 <a class="header-anchor" href="#前端部分常用笔面试题点评" aria-label="Permalink to &quot;前端部分常用笔面试题点评&quot;">​</a></h1><h2 id="js-的数据类型有哪些" tabindex="-1">JS 的数据类型有哪些？ <a class="header-anchor" href="#js-的数据类型有哪些" aria-label="Permalink to &quot;JS 的数据类型有哪些？&quot;">​</a></h2><ul><li>原始类型: Number、String、Boolean、Symbol、BigInt、undefined、null</li><li>对象类型： Object</li></ul><h2 id="原型的作用是什么" tabindex="-1">原型的作用是什么？ <a class="header-anchor" href="#原型的作用是什么" aria-label="Permalink to &quot;原型的作用是什么？&quot;">​</a></h2><p>之所有存在原型，是因为 JS 语言要实现面向对象，而原型是面向对象的实现手段之一。一个能支持面向对象的语言必须做到一点：能判定一个实例的类型。在 JS 中，通过原型就可以知晓某个对象从属于哪个类型，换句话说，<code>原型的存在避免了类型的丢失</code>.</p><h2 id="get-和-post-有什么区别" tabindex="-1">GET 和 POST 有什么区别? <a class="header-anchor" href="#get-和-post-有什么区别" aria-label="Permalink to &quot;GET 和 POST 有什么区别?&quot;">​</a></h2><ul><li>协议层面：<code>语义区别</code></li><li>应用层面：<code>GET请求体为空</code></li><li>浏览器层面</li></ul><h2 id="promise-解决了什么问题" tabindex="-1">Promise 解决了什么问题? <a class="header-anchor" href="#promise-解决了什么问题" aria-label="Permalink to &quot;Promise 解决了什么问题?&quot;">​</a></h2><ul><li>Promise 的出现最重要是为了<code>统一JS中异步实现方案</code>。</li><li>异步是 JS 中常见的场景，统一实现方案，不仅可以有效降低心智负担，更重要的是可以让不同的异步场景相互联动。</li><li>Promise 也无法消除回调，它只不过通过链式调用的方式让回调变得可控。</li></ul><h2 id="什么是-vue-的响应式" tabindex="-1">什么是 Vue 的响应式？ <a class="header-anchor" href="#什么是-vue-的响应式" aria-label="Permalink to &quot;什么是 Vue 的响应式？&quot;">​</a></h2><ul><li><code>vue数据响应式设计的初衷是为了实现数据和函数的联动</code>, 当数据变化后，用到该数据的联动函数会自动重新运行</li><li>具体在 vue 的开发中，数据和组建的 render 函数关联在一起，从而实现了数据变化自动运行 render，在感官上就看到了组件的重新渲染。</li><li>除了 vue 自动关联的 render 函数，其他还有很多使用到 vue 响应式的场景，比如 computed、watch 等等，不能仅把 vue 的数据响应式想象成和 render 的关联。</li></ul>',11),o=[l];function n(d,c,s,_,u,h){return i(),a("div",null,o)}const P=e(t,[["render",n]]);export{p as __pageData,P as default};
