import{_ as s,X as a,M as n,aw as l}from"./chunks/framework.BFDeQwB9.js";const b=JSON.parse('{"title":"数组的交集并集差集","description":"","frontmatter":{},"headers":[],"relativePath":"interview/数组的交集并集差集.md","filePath":"interview/数组的交集并集差集.md"}'),p={name:"interview/数组的交集并集差集.md"},o=l(`<h1 id="数组的交集并集差集" tabindex="-1">数组的交集并集差集 <a class="header-anchor" href="#数组的交集并集差集" aria-label="Permalink to &quot;数组的交集并集差集&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 两个数组的并集、交集、差集</span></span>
<span class="line"><span style="color:#6A737D;">// 不能出现重复项，得到的结果是一个新数组</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> arr1</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> arr2</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">77</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">88</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">88</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 并集</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> union</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">arr1, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">arr2]));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 交集</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> cross</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">(arr1.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> arr2.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(x))));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 差集</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> diff</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">(union.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;"> =&gt;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">cross.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(item))));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,5),e=[o];function r(t,c,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{b as __pageData,u as default};
