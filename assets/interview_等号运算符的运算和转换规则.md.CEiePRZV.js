import{_ as s,X as n,M as a,aw as l}from"./chunks/framework.BFDeQwB9.js";const y=JSON.parse('{"title":"等号运算符的运算和转换规则","description":"","frontmatter":{},"headers":[],"relativePath":"interview/等号运算符的运算和转换规则.md","filePath":"interview/等号运算符的运算和转换规则.md"}'),p={name:"interview/等号运算符的运算和转换规则.md"},e=l(`<h1 id="等号运算符的运算和转换规则" tabindex="-1">等号运算符的运算和转换规则 <a class="header-anchor" href="#等号运算符的运算和转换规则" aria-label="Permalink to &quot;等号运算符的运算和转换规则&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 如何让下面等式成立</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> 2</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;不可能的等式成立了&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 双等比较</span></span>
<span class="line"><span style="color:#6A737D;"> * 1. 有NAN返回false</span></span>
<span class="line"><span style="color:#6A737D;"> * 2. undefined 和 null 是相等的, 其他false</span></span>
<span class="line"><span style="color:#6A737D;"> * 3. 两端类型相同比较值</span></span>
<span class="line"><span style="color:#6A737D;"> * 4. 两端都是原始类型转换成数字比较</span></span>
<span class="line"><span style="color:#6A737D;"> * 5. 一端是原始类型，一端是对象，对象转原始类型</span></span>
<span class="line"><span style="color:#6A737D;"> *   5.1 toPrimitive</span></span>
<span class="line"><span style="color:#6A737D;"> *   5.2 valueOf</span></span>
<span class="line"><span style="color:#6A737D;"> *   5.3 toString</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  i: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  valueOf</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,5),o=[e];function r(c,t,i,b,E,d){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{y as __pageData,m as default};
