import{_ as s,X as a,M as n,aw as l}from"./chunks/framework.BFDeQwB9.js";const b=JSON.parse('{"title":"使用元祖生成联合类型","description":"","frontmatter":{},"headers":[],"relativePath":"ts/使用元祖生成联合类型.md","filePath":"ts/使用元祖生成联合类型.md"}'),p={name:"ts/使用元祖生成联合类型.md"},o=l(`<h1 id="使用元祖生成联合类型" tabindex="-1">使用元祖生成联合类型 <a class="header-anchor" href="#使用元祖生成联合类型" aria-label="Permalink to &quot;使用元祖生成联合类型&quot;">​</a></h1><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> colors</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> values</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createCard</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> colors</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> const</span><span style="color:#6A737D;"> // 转换成元祖</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> values</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> const</span><span style="color:#6A737D;"> // 转换成元祖</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> Colors</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> values[number]; </span><span style="color:#6A737D;">// 获取元祖类型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> Values</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> values[number]; </span><span style="color:#6A737D;">// 获取元祖类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createCard</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Values</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Colors</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,5),e=[o];function r(c,t,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{b as __pageData,u as default};
