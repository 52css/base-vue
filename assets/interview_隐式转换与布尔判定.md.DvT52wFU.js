import{_ as s,X as n,M as a,aw as e}from"./chunks/framework.BFDeQwB9.js";const m=JSON.parse('{"title":"隐式转换与布尔判定","description":"","frontmatter":{},"headers":[],"relativePath":"interview/隐式转换与布尔判定.md","filePath":"interview/隐式转换与布尔判定.md"}'),l={name:"interview/隐式转换与布尔判定.md"},p=e(`<h1 id="隐式转换与布尔判定" tabindex="-1">隐式转换与布尔判定 <a class="header-anchor" href="#隐式转换与布尔判定" aria-label="Permalink to &quot;隐式转换与布尔判定&quot;">​</a></h1><h2 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">([] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> [])</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">([] </span><span style="color:#F97583;">+</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">[])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="讲解" tabindex="-1">讲解 <a class="header-anchor" href="#讲解" aria-label="Permalink to &quot;讲解&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 对象转原始类型</span></span>
<span class="line"><span style="color:#6A737D;"> * 第一步优先调用\`Symbol.toPrimitive\`</span></span>
<span class="line"><span style="color:#6A737D;"> * 没有，第二步调用 valueOf()</span></span>
<span class="line"><span style="color:#6A737D;"> * 没有，第三步调用 toString()</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果还没有，就报错，</span></span>
<span class="line"><span style="color:#6A737D;"> * 所以 [] + [] =&gt; &#39;&#39; + &#39;&#39; =&gt; &#39;&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 布尔判定，null、undefined、0、NAN、false、&#39;&#39;, 这些情况是false</span></span>
<span class="line"><span style="color:#6A737D;"> * 所以 [] + ![] =&gt; &#39;&#39; + true =&gt; &#39;true&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,5),r=[p];function o(t,c,i,d,b,u){return a(),n("div",null,r)}const y=s(l,[["render",o]]);export{m as __pageData,y as default};
